{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["algod","algosdk","Algodv2","indexerClient","Indexer","myAlgoConnect","MyAlgoConnect","App","useState","accountAddress","setAccountAddress","setName","setBalance","decimals","setDecimals","total","setTotal","unitName","setUnitName","assetName","setAssetName","defaultFrozen","receiver","setReceiver","ASAID","setASAID","amount","setAmount","applicationId","fetchBalance","lookupAccountByID","do","then","response","_balance","account","catch","error","console","log","connectWallet","connect","accounts","_account","address","name","className","content","onClick","Control","placeholder","onChange","e","parseInt","target","value","createASA","isNaN","sendASA","getTransactionParams","params","createArg","TextEncoder","encode","appArgs","appCallTxn","makeApplicationCallTxnFromObject","from","appIndex","onComplete","OnApplicationComplete","NoOpOC","suggestedParams","actionTx","makeAssetCreateTxnWithSuggestedParams","undefined","txnArray","assignGroupID","signTransaction","map","txn","toByte","signedTxn","sendRawTransaction","blob","tx","waitForConfirmation","txId","confirmedTxn","sendArg","foreignAssets","makeAssetTransferTxnWithSuggestedParams","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e60b1ae.chunk.js","sourcesContent":["import './App.css';\n// import {PeraWalletConnect} from '@perawallet/connect';\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport algosdk, { waitForConfirmation } from 'algosdk';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { useState } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!./asally-approval.teal\";\nimport clearProgram from \"!!raw-loader!./asally-clear.teal\";\n\n// Create the PeraWalletConnect instance outside the component\n// const peraWallet = new PeraWalletConnect();\n\n// The app ID on testnet\n// const appIndex = 145059995; // CHANGE TO MY OWN APP ID\n\n// connect to the algorand node\nconst algod = new algosdk.Algodv2('','https://node.testnet.algoexplorerapi.io', '');\nconst indexerClient = new algosdk.Indexer('', 'https://algoindexer.testnet.algoexplorerapi.io', '');\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nfunction App() {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n  \n  const [decimals, setDecimals] = useState(null);\n  const [total, setTotal] = useState(null);\n  const [unitName, setUnitName] = useState(null);\n  const [assetName, setAssetName] = useState(null);\n  const [defaultFrozen, setDaultFrozen] = useState(false);\n\n  const [receiver, setReceiver] = useState(null);\n  const [ASAID, setASAID] = useState(null);\n  const [amount, setAmount] = useState(null);\n\n  // const applicationId = 148163834;\n  const applicationId = 148174489;\n\n\n  const fetchBalance = async (accountAddress) => {\n      indexerClient.lookupAccountByID(accountAddress).do()\n          .then(response => {\n              const _balance = response.account.amount;\n              setBalance(_balance);\n          })\n          .catch(error => {\n              console.log(error);\n          });\n  };\n\n  const connectWallet = async () => {\n      myAlgoConnect.connect()\n          .then(accounts => {\n              const _account = accounts[0];\n              setAccountAddress(_account.address);\n              setName(_account.name);\n              fetchBalance(_account.address);\n          }).catch(error => {\n          console.log('Could not connect to MyAlgo wallet');\n          console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n      setAccountAddress(null);\n      setName(null);\n      setBalance(null);\n  };\n\n\n\n// import {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\n\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algod.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// I USED THIS TO CREATE THE APPLICATION AND GET THE APPLICATION ID\n\n// CREATE PRODUCT: ApplicationCreateTxn\n// const createProductAction = async (senderAddress) => {\n//   console.log(accountAddress);\n//   let params = await algod.getTransactionParams().do();\n\n//   // Compile programs\n//   const compiledApprovalProgram = await compileProgram(approvalProgram)\n//   const compiledClearProgram = await compileProgram(clearProgram)\n\n//   let note = new TextEncoder().encode(\"sally:uv1\");\n\n//   // Create ApplicationCreateTxn\n//   let txn = algosdk.makeApplicationCreateTxnFromObject({\n//       from: senderAddress,\n//       suggestedParams: params,\n//       onComplete: algosdk.OnApplicationComplete.NoOpOC,\n//       approvalProgram: compiledApprovalProgram,\n//       clearProgram: compiledClearProgram,\n//       numLocalInts: 0,\n//       numLocalByteSlices: 0,\n//       numGlobalInts: 0,\n//       numGlobalByteSlices: 0,\n//       note: note,\n//   });\n    \n//   let txnArray = [txn]\n\n  // Create group transaction out of previously build transactions\n  // let groupID = algosdk.computeGroupID(txnArray)\n  // for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // let groupID = algosdk.assignGroupID(txnArray);\n\n  // // Sign & submit the group transaction\n  // let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n  // console.log(\"Signed group transaction\");\n  // let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n  // // Wait for group transaction to be confirmed\n  // let confirmedTxn = await algosdk.waitForConfirmation(algod, tx.txId, 4);\n\n  // // Get the completed Transaction\n  // console.log(\"Transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n  // // Get created application id and notify about completion\n  // let transactionResponse = await algod.pendingTransactionInformation(tx.txId).do();\n  // let appId = transactionResponse['application-index'];\n  // console.log(\"Created new app-id: \", appId);\n  // return appId;\n// }\n  \n  return (\n    <Container className='App-header'>\n      <meta name=\"name\" content=\"Modified Counter App\" />\n      <h2>AlgoHUB Final Assessment</h2>\n      <h2>Asally</h2>\n      <h3>Address: {accountAddress}</h3>\n      <Row>\n        <Col>\n          <Button className=\"btn-wallet\"\n          onClick={\n          accountAddress ? disconnect : connectWallet\n          }>\n          {accountAddress ? \"Disconnect\" : \"Connect Wallet\"}\n          </Button>\n        </Col>\n      </Row>\n        \n      <Container>\n        <Row>\n          <Col>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"Decimals E.g 0\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setDecimals(parseInt(e.target.value))}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"Total\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setTotal(parseInt(e.target.value))}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"ASA Symbol\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setUnitName(e.target.value)}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"AssetName\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setAssetName(e.target.value)}\n              />\n            </InputGroup>\n            <Button className=\"btn-wallet\"\n            onClick={() => createASA()}>\n              CREATE ASA\n            </Button>\n          </Col>\n\n          <Col>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"Receiver\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setReceiver(e.target.value)}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"ASA ID\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setASAID(parseInt(e.target.value))}\n                value={!isNaN(ASAID) ? ASAID : null}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"Amount\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setAmount(parseInt(e.target.value))}\n              />\n            </InputGroup>\n            <Button className=\"btn-wallet\"\n            onClick={() => sendASA()}>\n              SEND ASA\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </Container>\n  );\n\n\n  async function createASA() {\n    // console.log('hello asa')\n    try{\n\n      let params = await algod.getTransactionParams().do();\n\n      // Build required app args as Uint8Array\n      let createArg = new TextEncoder().encode(\"create_ASA\")\n      let appArgs = [createArg]\n\n      // Create ApplicationCallTxn\n      let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n          from: accountAddress,\n          appIndex: applicationId,\n          onComplete: algosdk.OnApplicationComplete.NoOpOC,\n          suggestedParams: params,\n          appArgs: appArgs\n      })\n\n      let actionTx = algosdk.makeAssetCreateTxnWithSuggestedParams(\n        accountAddress, \n        undefined,\n        total, \n        decimals, \n        defaultFrozen,\n        accountAddress, \n        accountAddress, \n        accountAddress,\n        accountAddress, \n        unitName, \n        assetName,\n        'http://someurl',\n        '16efaa3924a6fd9d3a4824799a4ac65d', \n        params\n      )\n\n      const txnArray = [appCallTxn, actionTx];\n\n      // Create group transaction out of previously build transactions\n\n      let groupID = algosdk.assignGroupID(txnArray);\n\n      // Sign & submit the group transaction\n      let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n      console.log(\"Signed group transaction\");\n      let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n      // Wait for group transaction to be confirmed\n      let confirmedTxn = await waitForConfirmation(algod, tx.txId, 4);\n\n      // Notify about completion\n      console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n      console.log(confirmedTxn[\"asset-index\"])\n      setASAID(confirmedTxn[\"asset-index\"]);\n    \n    } catch (e) {\n      console.error(`There was an error calling the counter app: ${e}`);\n    }\n\n  }\n  async function sendASA() {\n    // console.log('hello')\n    try{\n      let params = await algod.getTransactionParams().do();\n\n      // Build required app args as Uint8Array\n      let sendArg = new TextEncoder().encode(\"send_ASA\")\n      let appArgs = [sendArg]\n\n      // Create ApplicationCallTxn\n      let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n          from: accountAddress,\n          appIndex: applicationId,\n          onComplete: algosdk.OnApplicationComplete.NoOpOC,\n          accounts: [accountAddress, receiver],\n          foreignAssets: [parseInt(ASAID)],\n          suggestedParams: params,\n          appArgs: appArgs\n      })\n\n      let actionTx = algosdk.makeAssetTransferTxnWithSuggestedParams(\n        accountAddress, \n        receiver,\n        undefined, \n        undefined, \n        amount,\n        undefined, \n        ASAID, \n        params\n      )\n\n\n      const txnArray = [appCallTxn, actionTx];\n\n      // Create group transaction out of previously build transactions\n      // let groupID = algosdk.computeGroupID(txnArray)\n      // for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n      let groupID = algosdk.assignGroupID(txnArray);\n\n      // Sign & submit the group transaction\n      let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n      console.log(\"Signed group transaction\");\n      let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n      // Wait for group transaction to be confirmed\n      let confirmedTxn = await waitForConfirmation(algod, tx.txId, 4);\n\n      // Notify about completion\n      console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n    } catch (e) {\n      console.error(`There was an error calling the counter app: ${e}`);\n    }\n  }\n\n    \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// // import the bootstrap CSS\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}