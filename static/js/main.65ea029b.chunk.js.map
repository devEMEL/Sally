{"version":3,"sources":["App.js","reportWebVitals.js","index.js","action.js"],"names":["indexerClient","algosdk","Algodv2","Indexer","myAlgoConnect","MyAlgoConnect","App","useState","accountAddress","setAccountAddress","setName","setBalance","decimals","setDecimals","total","setTotal","unitName","setUnitName","assetName","setAssetName","defaultFrozen","receiver","setReceiver","ASAID","setASAID","amount","setAmount","applicationId","fetchBalance","lookupAccountByID","do","then","response","_balance","account","catch","error","console","log","connectWallet","connect","accounts","_account","address","name","optinClick","optin","createASAClick","createASA","sendASAClick","sendASA","Container","className","content","Row","Col","Button","onClick","InputGroup","Form","Control","placeholder","onChange","e","parseInt","target","value","isNaN","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","algod","getTransactionParams","params","optinTxn","makeApplicationOptInTxnFromObject","from","appIndex","onComplete","OnApplicationComplete","OptInOC","suggestedParams","txnArray","assignGroupID","signTransaction","map","txn","toByte","signedTxn","sendRawTransaction","blob","tx","waitForConfirmation","txId","confirmedTxn","createArg","TextEncoder","encode","assetNameArg","appArgs","appCallTxn","makeApplicationCallTxnFromObject","NoOpOC","actionTx","makeAssetCreateTxnWithSuggestedParams","undefined","sendArg","foreignAssets","makeAssetTransferTxnWithSuggestedParams"],"mappings":"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","file":"static/js/main.65ea029b.chunk.js","sourcesContent":["import './App.css';\nimport algosdk, { waitForConfirmation } from 'algosdk';\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport {  optin, createASA, sendASA } from './action';\n\n// // connect to the algorand node\nconst algod = new algosdk.Algodv2('','https://node.testnet.algoexplorerapi.io', '');\nconst indexerClient = new algosdk.Indexer('', 'https://algoindexer.testnet.algoexplorerapi.io', '');\nconst myAlgoConnect = new MyAlgoConnect();\n\nfunction App() {\n\n\n  const [accountAddress, setAccountAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n  \n  const [decimals, setDecimals] = useState(null);\n  const [total, setTotal] = useState(null);\n  const [unitName, setUnitName] = useState(null);\n  const [assetName, setAssetName] = useState(null);\n  const [defaultFrozen, setDaultFrozen] = useState(false);\n\n  const [receiver, setReceiver] = useState(null);\n  const [ASAID, setASAID] = useState(null);\n  const [amount, setAmount] = useState(null);\n\n  const [applicationId, setApplicationId] = useState(149754267);\n\n\n  const fetchBalance = async (accountAddress) => {\n      indexerClient.lookupAccountByID(accountAddress).do()\n          .then(response => {\n              const _balance = response.account.amount;\n              setBalance(_balance);\n          })\n          .catch(error => {\n              console.log(error);\n          });\n  };\n\n  const connectWallet = async () => {\n      myAlgoConnect.connect()\n          .then(accounts => {\n              const _account = accounts[0];\n              setAccountAddress(_account.address);\n              setName(_account.name);\n              fetchBalance(_account.address);\n          }).catch(error => {\n          console.log('Could not connect to MyAlgo wallet');\n          console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n      setAccountAddress(null);\n      setName(null);\n      setBalance(null);\n  };\n  const optinClick = async () => {\n    optin(accountAddress, applicationId)\n  }\n  const createASAClick = async () => {\n    // const globalStateLength = await getGlobalStateLength(applicationId);\n    // const localStateLength = await getLocalStateLength(applicationId);\n    // getLocalStateLength()\n    createASA(accountAddress, applicationId, assetName, total, unitName, decimals, defaultFrozen)\n  }\n\n  const sendASAClick = async () => {\n    sendASA(accountAddress, receiver, applicationId, amount, ASAID)\n  }\n \n  \n  return (\n    <Container className='App-header'>\n      <meta name=\"name\" content=\"Modified Counter App\" />\n      <h2>AlgoHUB Final Assessment</h2>\n      <h2>Asally</h2>\n      <h3>Address: {accountAddress}</h3>\n      \n      <Row>\n        <Col>\n          <Button className=\"btn-wallet\"\n          onClick={\n          accountAddress ? disconnect : connectWallet\n          }>\n          {accountAddress ? \"Disconnect\" : \"Connect Wallet\"}\n          </Button>\n        </Col>\n      </Row>\n      <Button onClick={() => optinClick()}>Optin</Button>\n        \n      <Container>\n        <Row>\n          <Col>\n            <InputGroup className=\"mb-3\">\n               <Form.Control\n                placeholder=\"Decimals E.g 0\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setDecimals(parseInt(e.target.value))}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"Total\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setTotal(parseInt(e.target.value))}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"ASA Symbol\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setUnitName(e.target.value)}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n               <Form.Control\n                placeholder=\"AssetName\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setAssetName(e.target.value)}\n              />\n            </InputGroup>\n            <Button className=\"btn-wallet\"\n            onClick={() => createASAClick()}>\n              CREATE ASA\n            </Button>\n          </Col>\n\n          <Col>\n             <InputGroup className=\"mb-3\">\n               <Form.Control\n                placeholder=\"Receiver\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setReceiver(e.target.value)}\n              />\n             </InputGroup>\n             <InputGroup className=\"mb-3\">\n               <Form.Control\n                placeholder=\"ASA ID\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setASAID(parseInt(e.target.value))}\n                value={!isNaN(ASAID) ? ASAID : null}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                placeholder=\"Amount\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={(e) => setAmount(parseInt(e.target.value))}\n              />\n            </InputGroup>\n             <Button className=\"btn-wallet\"\n            onClick={() => sendASAClick()}>\n              SEND ASA\n            </Button>\n           </Col>\n         </Row>\n       </Container>\n     </Container>\n   );\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\nreportWebVitals();\n\n","import algosdk, { waitForConfirmation } from 'algosdk';\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!./asally-approval.teal\";\nimport clearProgram from \"!!raw-loader!./asally-clear.teal\";\n\nconst algod = new algosdk.Algodv2('','https://node.testnet.algoexplorerapi.io', '');\nconst indexerClient = new algosdk.Indexer('', 'https://algoindexer.testnet.algoexplorerapi.io', '');\nconst myAlgoConnect = new MyAlgoConnect();\n\n\n\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algod.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n\n// I USED THIS TO CREATE THE APPLICATION AND GET THE APPLICATION ID\n\n// CREATE PRODUCT: ApplicationCreateTxn\n// export const createApplicationAction = async (accountAddress) => {\n//   console.log(accountAddress);\n//   let params = await algod.getTransactionParams().do();\n\n//   // Compile programs\n//   const compiledApprovalProgram = await compileProgram(approvalProgram)\n//   const compiledClearProgram = await compileProgram(clearProgram)\n\n//   let note = new TextEncoder().encode(\"sally:uv1\");\n\n//   // Create ApplicationCreateTxn\n//   let txn = algosdk.makeApplicationCreateTxnFromObject({\n//       from: accountAddress,\n//       suggestedParams: params,\n//       onComplete: algosdk.OnApplicationComplete.NoOpOC,\n//       approvalProgram: compiledApprovalProgram,\n//       clearProgram: compiledClearProgram,\n//       numLocalInts: 1,\n//       numLocalByteSlices: 15,\n//       numGlobalInts: 1,\n//       numGlobalByteSlices: 15,\n//       note: note,\n//   });\n    \n//   let txnArray = [txn]\n\n//   let groupID = algosdk.assignGroupID(txnArray);\n\n//   // Sign & submit the group transaction\n//   let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n//   console.log(\"Signed group transaction\");\n//   let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n//   // Wait for group transaction to be confirmed\n//   let confirmedTxn = await algosdk.waitForConfirmation(algod, tx.txId, 4);\n\n//   // Get the completed Transaction\n//   console.log(\"Transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n//   // Get created application id and notify about completion\n//   let transactionResponse = await algod.pendingTransactionInformation(tx.txId).do();\n//   let appId = transactionResponse['application-index'];\n//   console.log(\"Created new app-id: \", appId);\n//   return appId;\n// }\n\n// export const getGlobalStateLength = async (applicationId) => {\n//   const response = await indexerClient.lookupApplications(applicationId).includeAll(true).do();\n//   const globalStateLength = parseInt((response.application.params[\"global-state\"]).length);\n//   return globalStateLength;\n// }\n\n\n// export const getLocalStateLength = async (accountAddress) => {\n//   const response = await indexerClient.lookupAccountAppLocalState(accountAddress).do();\n//   const localStateLength = (response[\"apps-local-states\"]).length + 1;\n//   console.log(localStateLength);\n//   return localStateLength;\n// }\n\nexport const optin = async (accountAddress, applicationId) => {\n\n  let params = await algod.getTransactionParams().do();\n  let optinTxn = algosdk.makeApplicationOptInTxnFromObject({\n    from: accountAddress,\n    appIndex: applicationId,\n    onComplete: algosdk.OnApplicationComplete.OptInOC,\n    suggestedParams: params\n  });\n\n  const txnArray = [optinTxn];\n\n  // Create group transaction out of previously build transactions\n\n  let groupID = algosdk.assignGroupID(txnArray);\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n  console.log(\"Signed group transaction\");\n  let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await waitForConfirmation(algod, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\nexport const  createASA = async (accountAddress, applicationId, assetName, total, unitName, decimals, defaultFrozen) => {\n  // console.log('hello asa')\n  try{\n    // GET GLOBAL AND LOCAL STATE LENGTH\n    // const globalStateLength = await getGlobalStateLength()\n    // const localStateLength = await getLocalStateLength()\n\n    let params = await algod.getTransactionParams().do();\n\n    // Build required app args as Uint8Array\n    let createArg = new TextEncoder().encode(\"create_ASA\")\n    // let globalIndexArg = algosdk.encodeUint64(globalStateLength)\n    // let localIndexArg = algosdk.encodeUint64(localStateLength)\n    let assetNameArg = new TextEncoder().encode(assetName)\n    let appArgs = [createArg, assetNameArg]\n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: accountAddress,\n        appIndex: applicationId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    let actionTx = algosdk.makeAssetCreateTxnWithSuggestedParams(\n      accountAddress, \n      undefined,\n      total, \n      decimals, \n      defaultFrozen,\n      accountAddress, \n      accountAddress, \n      accountAddress,\n      accountAddress, \n      unitName, \n      assetName,\n      'http://someurl',\n      '16efaa3924a6fd9d3a4824799a4ac65d', \n      params\n    )\n\n    const txnArray = [appCallTxn, actionTx];\n\n    // Create group transaction out of previously build transactions\n\n    let groupID = algosdk.assignGroupID(txnArray);\n\n    // Sign & submit the group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n    console.log(\"Signed group transaction\");\n    let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n    // Wait for group transaction to be confirmed\n    let confirmedTxn = await waitForConfirmation(algod, tx.txId, 4);\n\n    // Notify about completion\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n    console.log(confirmedTxn[\"asset-index\"])\n    // setASAID(confirmedTxn[\"asset-index\"]);\n  \n  } catch (e) {\n    console.error(`There was an error calling the app: ${e}`);\n  }\n\n}\nexport const sendASA = async(accountAddress, receiver, applicationId, amount, ASAID) => {\n  // console.log('hello')\n  try{\n    let params = await algod.getTransactionParams().do();\n\n    // Build required app args as Uint8Array\n    let sendArg = new TextEncoder().encode(\"send_ASA\")\n    let appArgs = [sendArg]\n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: accountAddress,\n        appIndex: applicationId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        accounts: [accountAddress, receiver],\n        foreignAssets: [parseInt(ASAID)],\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    let actionTx = algosdk.makeAssetTransferTxnWithSuggestedParams(\n      accountAddress, \n      receiver,\n      undefined, \n      undefined, \n      amount,\n      undefined, \n      ASAID, \n      params\n    )\n\n\n    const txnArray = [appCallTxn, actionTx];\n\n    // Create group transaction out of previously build transactions\n    // let groupID = algosdk.computeGroupID(txnArray)\n    // for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n    let groupID = algosdk.assignGroupID(txnArray);\n\n    // Sign & submit the group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n    console.log(\"Signed group transaction\");\n    let tx = await algod.sendRawTransaction(signedTxn.map(txn => txn.blob)).do(); \n\n    // Wait for group transaction to be confirmed\n    let confirmedTxn = await waitForConfirmation(algod, tx.txId, 4);\n\n    // Notify about completion\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n  } catch (e) {\n    console.error(`There was an error calling the app: ${e}`);\n  }\n}\n"],"sourceRoot":""}